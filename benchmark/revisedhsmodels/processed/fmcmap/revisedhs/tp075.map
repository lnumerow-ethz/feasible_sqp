fmcTitle("tp075"):
# Source version 1
# Simple APM canonicalizer version 1.3
# FMCMAP back end version 1.1
asin := proc(x::algebraic) local y: y := arcsin(x): RETURN(y): end:
atan := proc(x::algebraic) local y: y := arctan(x): RETURN(y): end:
myownabs := proc(x::algebraic) local y: y := fmc_m_abs(x): RETURN(y): end:
a := 0.48:
c3 := 3:
l_1 := 0:
l_2 := 0:
l_3 := -a:
l_4 := -a:
u_1 := 1200:
u_2 := 1200:
u_3 := a:
u_4 := a:
fmcInitialValue('x_1', 0):
fmcStrongLowerBound('x_1', l_1):
fmcStrongUpperBound('x_1', u_1):
fmcInitialValue('x_2', 0):
fmcStrongLowerBound('x_2', l_2):
fmcStrongUpperBound('x_2', u_2):
fmcInitialValue('x_3', 0):
fmcStrongLowerBound('x_3', l_3):
fmcStrongUpperBound('x_3', u_3):
fmcInitialValue('x_4', 0):
fmcStrongLowerBound('x_4', l_4):
fmcStrongUpperBound('x_4', u_4):
myminfun := 3*x_1 + 1.0e-6*x_1^3 + 2*x_2 + 2.0e-6*x_2^3/c3:
myabsdevnod0_0 := myownabs(myminfun - 5174.412695377741):
myreldevnod0_0 := myownabs(myminfun/5174.412695377741 - 1):
myabsdevnod0_1 := myownabs(x_1 - 776.1590265860596):
myreldevnod0_1 := myownabs(x_1/776.1590265860596 - 1):
myabsdevnod0_2 := myownabs(x_2 - 925.1951384690918):
myreldevnod0_2 := myownabs(x_2/925.1951384690918 - 1):
myabsdevnod0_3 := myownabs(x_3 - 0.05110892853835123):
myreldevnod0_3 := myownabs(x_3/0.05110892853835123 - 1):
myabsdevnod0_4 := myownabs(x_4 + 0.4288910714616488):
myreldevnod0_4 := myownabs(x_4/0.4288910714616488 + 1):
myabsdevnod1_0 := (1/2)*(myownabs(myabsdevnod0_0 - myabsdevnod0_1) + (myabsdevnod0_0 + myabsdevnod0_1)):
myreldevnod1_0 := (1/2)*(myownabs(myreldevnod0_0 - myreldevnod0_1) + (myreldevnod0_0 + myreldevnod0_1)):
myabsdevnod1_2 := (1/2)*(myownabs(myabsdevnod0_2 - myabsdevnod0_3) + (myabsdevnod0_2 + myabsdevnod0_3)):
myreldevnod1_2 := (1/2)*(myownabs(myreldevnod0_2 - myreldevnod0_3) + (myreldevnod0_2 + myreldevnod0_3)):
myabsdevnod1_4 := myabsdevnod0_4:
myreldevnod1_4 := myreldevnod0_4:
myabsdevnod2_0 := (1/2)*(myownabs(myabsdevnod1_0 - myabsdevnod1_2) + (myabsdevnod1_0 + myabsdevnod1_2)):
myreldevnod2_0 := (1/2)*(myownabs(myreldevnod1_0 - myreldevnod1_2) + (myreldevnod1_0 + myreldevnod1_2)):
myabsdevnod2_4 := myabsdevnod1_4:
myreldevnod2_4 := myreldevnod1_4:
myabsdevnod3_0 := (1/2)*(myownabs(myabsdevnod2_0 - myabsdevnod2_4) + (myabsdevnod2_0 + myabsdevnod2_4)):
myreldevnod3_0 := (1/2)*(myownabs(myreldevnod2_0 - myreldevnod2_4) + (myreldevnod2_0 + myreldevnod2_4)):
zmyabsdevmax := myabsdevnod3_0:
zmyreldevmax := myreldevnod3_0:
obj := myminfun:
fmcMinimum(obj):
fmcEquality('ce_1', 1000*sin((-1)*x_3 - 0.25) + 1000*sin((-1)*x_4 - 0.25) + 894.8 - x_1):
fmcEquality('ce_2', 1000*sin(x_3 - 0.25) + 1000*sin(x_3 - x_4 - 0.25) + 894.8 - x_2):
fmcEquality('ce_3', 1000*sin(x_4 - 0.25) + 1000*sin(x_4 - x_3 - 0.25) + 1294.8):
fmcInequality('ci_1', x_4 - x_3 + a):
fmcInequality('ci_2', x_3 - x_4 + a):
fmcEscortFloat('x_1', x_1):
fmcEscortFloat('x_2', x_2):
fmcEscortFloat('x_3', x_3):
fmcEscortFloat('x_4', x_4):
fmcEscortFloat('myminfun', myminfun):
fmcEscortFloat('zmyabsdevmax', zmyabsdevmax):
fmcEscortFloat('zmyreldevmax', zmyreldevmax):
fmcControlMinimum(1, 0):
# End Model
