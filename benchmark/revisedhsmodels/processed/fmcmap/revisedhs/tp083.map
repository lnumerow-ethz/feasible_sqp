fmcTitle("tp083"):
# Source version 1
# Simple APM canonicalizer version 1.3
# FMCMAP back end version 1.1
asin := proc(x::algebraic) local y: y := arcsin(x): RETURN(y): end:
atan := proc(x::algebraic) local y: y := arctan(x): RETURN(y): end:
myownabs := proc(x::algebraic) local y: y := fmc_m_abs(x): RETURN(y): end:
a_1 := 85.334407:
a_2 := 0.0056858:
a_3 := 0.0006262:
a_4 := 0.0022053:
a_5 := 80.51249:
a_6 := 0.0071317:
a_7 := 0.0029955:
a_8 := 0.0021813:
a_9 := 9.300961:
a_10 := 0.0047026:
a_11 := 0.0012547:
a_12 := 0.0019085:
fmcInitialValue('x_1', 78):
fmcStrongLowerBound('x_1', 78):
fmcStrongUpperBound('x_1', 102):
fmcInitialValue('x_2', 33):
fmcStrongLowerBound('x_2', 33):
fmcStrongUpperBound('x_2', 45):
fmcInitialValue('x_3', 27):
fmcStrongLowerBound('x_3', 27):
fmcStrongUpperBound('x_3', 45):
fmcInitialValue('x_4', 27):
fmcStrongLowerBound('x_4', 27):
fmcStrongUpperBound('x_4', 45):
fmcInitialValue('x_5', 27):
fmcStrongLowerBound('x_5', 27):
fmcStrongUpperBound('x_5', 45):
t_1 := a_1 + a_2*x_2*x_5 + a_3*x_1*x_4 - a_4*x_3*x_5:
t_2 := a_5 + a_6*x_2*x_5 + a_7*x_1*x_2 + a_8*x_3^2 - 90:
t_3 := a_9 + a_10*x_3*x_5 + a_11*x_1*x_3 + a_12*x_3*x_4 - 20:
myminfun := 5.3578547*x_3^2 + 0.8356891*x_1*x_5 + 37.293239*x_1 - 40792.141:
myabsdevnod0_0 := myownabs(myminfun + 30665.53867178332):
myreldevnod0_0 := myownabs(myminfun/30665.53867178332 + 1):
myabsdevnod0_1 := myownabs(x_1 - 78):
myreldevnod0_1 := myownabs(x_1/78 - 1):
myabsdevnod0_2 := myownabs(x_2 - 33):
myreldevnod0_2 := myownabs(x_2/33 - 1):
myabsdevnod0_3 := myownabs(x_3 - 29.9952560256816):
myreldevnod0_3 := myownabs(x_3/29.9952560256816 - 1):
myabsdevnod0_4 := myownabs(x_4 - 45):
myreldevnod0_4 := myownabs(x_4/45 - 1):
myabsdevnod0_5 := myownabs(x_5 - 36.7758129057882):
myreldevnod0_5 := myownabs(x_5/36.7758129057882 - 1):
myabsdevnod1_0 := (1/2)*(myownabs(myabsdevnod0_0 - myabsdevnod0_1) + (myabsdevnod0_0 + myabsdevnod0_1)):
myreldevnod1_0 := (1/2)*(myownabs(myreldevnod0_0 - myreldevnod0_1) + (myreldevnod0_0 + myreldevnod0_1)):
myabsdevnod1_2 := (1/2)*(myownabs(myabsdevnod0_2 - myabsdevnod0_3) + (myabsdevnod0_2 + myabsdevnod0_3)):
myreldevnod1_2 := (1/2)*(myownabs(myreldevnod0_2 - myreldevnod0_3) + (myreldevnod0_2 + myreldevnod0_3)):
myabsdevnod1_4 := (1/2)*(myownabs(myabsdevnod0_4 - myabsdevnod0_5) + (myabsdevnod0_4 + myabsdevnod0_5)):
myreldevnod1_4 := (1/2)*(myownabs(myreldevnod0_4 - myreldevnod0_5) + (myreldevnod0_4 + myreldevnod0_5)):
myabsdevnod2_0 := (1/2)*(myownabs(myabsdevnod1_0 - myabsdevnod1_2) + (myabsdevnod1_0 + myabsdevnod1_2)):
myreldevnod2_0 := (1/2)*(myownabs(myreldevnod1_0 - myreldevnod1_2) + (myreldevnod1_0 + myreldevnod1_2)):
myabsdevnod2_4 := myabsdevnod1_4:
myreldevnod2_4 := myreldevnod1_4:
myabsdevnod3_0 := (1/2)*(myownabs(myabsdevnod2_0 - myabsdevnod2_4) + (myabsdevnod2_0 + myabsdevnod2_4)):
myreldevnod3_0 := (1/2)*(myownabs(myreldevnod2_0 - myreldevnod2_4) + (myreldevnod2_0 + myreldevnod2_4)):
zmyabsdevmax := myabsdevnod3_0:
zmyreldevmax := myreldevnod3_0:
obj := myminfun:
fmcMinimum(obj):
fmcInequality('ci_1', t_1):
fmcInequality('ci_2', 92 - t_1):
fmcInequality('ci_3', t_2):
fmcInequality('ci_4', 20 - t_2):
fmcInequality('ci_5', t_3):
fmcInequality('ci_6', 5 - t_3):
fmcEscortFloat('x_1', x_1):
fmcEscortFloat('x_2', x_2):
fmcEscortFloat('x_3', x_3):
fmcEscortFloat('x_4', x_4):
fmcEscortFloat('x_5', x_5):
fmcEscortFloat('myminfun', myminfun):
fmcEscortFloat('zmyabsdevmax', zmyabsdevmax):
fmcEscortFloat('zmyreldevmax', zmyreldevmax):
fmcControlMinimum(1, 0):
# End Model
