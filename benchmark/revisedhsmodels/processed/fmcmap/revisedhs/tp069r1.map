fmcTitle("tp069r1"):
# Source version 4
# Simple APM canonicalizer version 1.3
# FMCMAP back end version 1.1
asin := proc(x::algebraic) local y: y := arcsin(x): RETURN(y): end:
atan := proc(x::algebraic) local y: y := arctan(x): RETURN(y): end:
myownabs := proc(x::algebraic) local y: y := fmc_m_abs(x): RETURN(y): end:
a := 0.1:
b := 1000:
d := 1:
n := 4:
ubx2hs := 100:
ubx2r := 3:
ubx2 := ubx2r:
fmcInitialValue('x_1', 1):
fmcStrongLowerBound('x_1', 0.0001):
fmcStrongUpperBound('x_1', 100):
fmcInitialValue('x_2', 1):
fmcStrongLowerBound('x_2', 0):
fmcStrongUpperBound('x_2', ubx2):
fmcInitialValue('x_3', 1):
fmcStrongLowerBound('x_3', 0):
fmcStrongUpperBound('x_3', 2):
fmcInitialValue('x_4', 1):
fmcStrongLowerBound('x_4', 0):
fmcStrongUpperBound('x_4', 2):
argn := (-1)*x_2 - d*sqrt(n):
arg0 := (-1)*x_2:
argp := (-1)*x_2 + d*sqrt(n):
phin := (1/2)*erfc((-1)*argn/sqrt(2)):
phi0 := (1/2)*erfc((-1)*arg0/sqrt(2)):
phip := (1/2)*erfc((-1)*argp/sqrt(2)):
c_1 := x_3 - 2*phi0:
c_2 := x_4 - phip - phin:
num := b*(exp(x_1) - 1) - x_3:
den := exp(x_1) - 1 + x_4:
mf := (a*n - (num/den)*x_4)/x_1:
myminfun := mf:
myabsdevnod0_0 := myownabs(myminfun + 956.7128866500283):
myreldevnod0_0 := myownabs(myminfun/956.7128866500283 + 1):
myabsdevnod0_1 := myownabs(x_1 - 0.02937141742170559):
myreldevnod0_1 := myownabs(x_1/0.02937141742170559 - 1):
myabsdevnod0_2 := myownabs(x_2 - 1.190253450406911):
myreldevnod0_2 := myownabs(x_2/1.190253450406911 - 1):
myabsdevnod0_3 := myownabs(x_3 - 0.2339467906674188):
myreldevnod0_3 := myownabs(x_3/0.2339467906674188 - 1):
myabsdevnod0_4 := myownabs(x_4 - 0.7916678112438039):
myreldevnod0_4 := myownabs(x_4/0.7916678112438039 - 1):
myabsdevnod1_0 := (1/2)*(myownabs(myabsdevnod0_0 - myabsdevnod0_1) + (myabsdevnod0_0 + myabsdevnod0_1)):
myreldevnod1_0 := (1/2)*(myownabs(myreldevnod0_0 - myreldevnod0_1) + (myreldevnod0_0 + myreldevnod0_1)):
myabsdevnod1_2 := (1/2)*(myownabs(myabsdevnod0_2 - myabsdevnod0_3) + (myabsdevnod0_2 + myabsdevnod0_3)):
myreldevnod1_2 := (1/2)*(myownabs(myreldevnod0_2 - myreldevnod0_3) + (myreldevnod0_2 + myreldevnod0_3)):
myabsdevnod1_4 := myabsdevnod0_4:
myreldevnod1_4 := myreldevnod0_4:
myabsdevnod2_0 := (1/2)*(myownabs(myabsdevnod1_0 - myabsdevnod1_2) + (myabsdevnod1_0 + myabsdevnod1_2)):
myreldevnod2_0 := (1/2)*(myownabs(myreldevnod1_0 - myreldevnod1_2) + (myreldevnod1_0 + myreldevnod1_2)):
myabsdevnod2_4 := myabsdevnod1_4:
myreldevnod2_4 := myreldevnod1_4:
myabsdevnod3_0 := (1/2)*(myownabs(myabsdevnod2_0 - myabsdevnod2_4) + (myabsdevnod2_0 + myabsdevnod2_4)):
myreldevnod3_0 := (1/2)*(myownabs(myreldevnod2_0 - myreldevnod2_4) + (myreldevnod2_0 + myreldevnod2_4)):
zmyabsdevmax := myabsdevnod3_0:
zmyreldevmax := myreldevnod3_0:
obj := myminfun:
fmcMinimum(obj):
fmcEquality('ce_1', c_1):
fmcEquality('ce_2', c_2):
fmcEscortFloat('x_1', x_1):
fmcEscortFloat('x_2', x_2):
fmcEscortFloat('x_3', x_3):
fmcEscortFloat('x_4', x_4):
fmcEscortFloat('myminfun', myminfun):
fmcEscortFloat('zmyabsdevmax', zmyabsdevmax):
fmcEscortFloat('zmyreldevmax', zmyreldevmax):
fmcControlMinimum(1, 0):
# End Model
