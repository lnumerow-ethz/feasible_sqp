# Model tp111
# Source version 1
# Simple APM canonicalizer version 1.3
# AMPL back end version 1.1
param c_1 := -6.089;
param c_2 := -17.164;
param c_3 := -34.054;
param c_4 := -5.914;
param c_5 := -24.721;
param c_6 := -14.986;
param c_7 := -24.100;
param c_8 := -10.708;
param c_9 := -26.662;
param c_10 := -22.179;
param si_0 := 0;
param so_0 := 0;
var x_1 >= -100, <= 100;
let x_1 := -2.3;
var x_2 >= -100, <= 100;
let x_2 := -2.3;
var x_3 >= -100, <= 100;
let x_3 := -2.3;
var x_4 >= -100, <= 100;
let x_4 := -2.3;
var x_5 >= -100, <= 100;
let x_5 := -2.3;
var x_6 >= -100, <= 100;
let x_6 := -2.3;
var x_7 >= -100, <= 100;
let x_7 := -2.3;
var x_8 >= -100, <= 100;
let x_8 := -2.3;
var x_9 >= -100, <= 100;
let x_9 := -2.3;
var x_10 >= -100, <= 100;
let x_10 := -2.3;
var cf_1 = exp(x_1) + 2*exp(x_2) + 2*exp(x_3) + exp(x_6) + exp(x_10) - 2;
var cf_2 = exp(x_4) + 2*exp(x_5) + exp(x_6) + exp(x_7) - 1;
var cf_3 = exp(x_3) + exp(x_7) + exp(x_8) + 2*exp(x_9) + exp(x_10) - 1;
var si_1 = si_0 + exp(x_1);
var si_2 = si_1 + exp(x_2);
var si_3 = si_2 + exp(x_3);
var si_4 = si_3 + exp(x_4);
var si_5 = si_4 + exp(x_5);
var si_6 = si_5 + exp(x_6);
var si_7 = si_6 + exp(x_7);
var si_8 = si_7 + exp(x_8);
var si_9 = si_8 + exp(x_9);
var si_10 = si_9 + exp(x_10);
var aux = log(si_10);
var so_1 = so_0 + exp(x_1)*(c_1 + x_1 - aux);
var so_2 = so_1 + exp(x_2)*(c_2 + x_2 - aux);
var so_3 = so_2 + exp(x_3)*(c_3 + x_3 - aux);
var so_4 = so_3 + exp(x_4)*(c_4 + x_4 - aux);
var so_5 = so_4 + exp(x_5)*(c_5 + x_5 - aux);
var so_6 = so_5 + exp(x_6)*(c_6 + x_6 - aux);
var so_7 = so_6 + exp(x_7)*(c_7 + x_7 - aux);
var so_8 = so_7 + exp(x_8)*(c_8 + x_8 - aux);
var so_9 = so_8 + exp(x_9)*(c_9 + x_9 - aux);
var so_10 = so_9 + exp(x_10)*(c_10 + x_10 - aux);
var mf = so_10;
var myminfun = mf;
var myabsdevnod0_0 = abs(myminfun + 47.76109085936586);
var myreldevnod0_0 = abs(myminfun/47.76109085936586 + 1);
var myabsdevnod0_1 = abs(x_1 + 3.202311588551215);
var myreldevnod0_1 = abs(x_1/3.202311588551215 + 1);
var myabsdevnod0_2 = abs(x_2 + 1.912366597080981);
var myreldevnod0_2 = abs(x_2/1.912366597080981 + 1);
var myabsdevnod0_3 = abs(x_3 + 0.2444267477503837);
var myreldevnod0_3 = abs(x_3/0.2444267477503837 + 1);
var myabsdevnod0_4 = abs(x_4 + 6.561177271658377);
var myreldevnod0_4 = abs(x_4/6.561177271658377 + 1);
var myabsdevnod0_5 = abs(x_5 + 0.7230979632953046);
var myreldevnod0_5 = abs(x_5/0.7230979632953046 + 1);
var myabsdevnod0_6 = abs(x_6 + 7.27423228018815);
var myreldevnod0_6 = abs(x_6/7.27423228018815 + 1);
var myabsdevnod0_7 = abs(x_7 + 3.59723742232778);
var myreldevnod0_7 = abs(x_7/3.59723742232778 + 1);
var myabsdevnod0_8 = abs(x_8 + 4.020316730690851);
var myreldevnod0_8 = abs(x_8/4.020316730690851 + 1);
var myabsdevnod0_9 = abs(x_9 + 3.288376881360255);
var myreldevnod0_9 = abs(x_9/3.288376881360255 + 1);
var myabsdevnod0_10 = abs(x_10 + 2.334371739220618);
var myreldevnod0_10 = abs(x_10/2.334371739220618 + 1);
var myabsdevnod1_0 = (1/2)*(abs(myabsdevnod0_0 - myabsdevnod0_1) + (myabsdevnod0_0 + myabsdevnod0_1));
var myreldevnod1_0 = (1/2)*(abs(myreldevnod0_0 - myreldevnod0_1) + (myreldevnod0_0 + myreldevnod0_1));
var myabsdevnod1_2 = (1/2)*(abs(myabsdevnod0_2 - myabsdevnod0_3) + (myabsdevnod0_2 + myabsdevnod0_3));
var myreldevnod1_2 = (1/2)*(abs(myreldevnod0_2 - myreldevnod0_3) + (myreldevnod0_2 + myreldevnod0_3));
var myabsdevnod1_4 = (1/2)*(abs(myabsdevnod0_4 - myabsdevnod0_5) + (myabsdevnod0_4 + myabsdevnod0_5));
var myreldevnod1_4 = (1/2)*(abs(myreldevnod0_4 - myreldevnod0_5) + (myreldevnod0_4 + myreldevnod0_5));
var myabsdevnod1_6 = (1/2)*(abs(myabsdevnod0_6 - myabsdevnod0_7) + (myabsdevnod0_6 + myabsdevnod0_7));
var myreldevnod1_6 = (1/2)*(abs(myreldevnod0_6 - myreldevnod0_7) + (myreldevnod0_6 + myreldevnod0_7));
var myabsdevnod1_8 = (1/2)*(abs(myabsdevnod0_8 - myabsdevnod0_9) + (myabsdevnod0_8 + myabsdevnod0_9));
var myreldevnod1_8 = (1/2)*(abs(myreldevnod0_8 - myreldevnod0_9) + (myreldevnod0_8 + myreldevnod0_9));
var myabsdevnod1_10 = myabsdevnod0_10;
var myreldevnod1_10 = myreldevnod0_10;
var myabsdevnod2_0 = (1/2)*(abs(myabsdevnod1_0 - myabsdevnod1_2) + (myabsdevnod1_0 + myabsdevnod1_2));
var myreldevnod2_0 = (1/2)*(abs(myreldevnod1_0 - myreldevnod1_2) + (myreldevnod1_0 + myreldevnod1_2));
var myabsdevnod2_4 = (1/2)*(abs(myabsdevnod1_4 - myabsdevnod1_6) + (myabsdevnod1_4 + myabsdevnod1_6));
var myreldevnod2_4 = (1/2)*(abs(myreldevnod1_4 - myreldevnod1_6) + (myreldevnod1_4 + myreldevnod1_6));
var myabsdevnod2_8 = (1/2)*(abs(myabsdevnod1_8 - myabsdevnod1_10) + (myabsdevnod1_8 + myabsdevnod1_10));
var myreldevnod2_8 = (1/2)*(abs(myreldevnod1_8 - myreldevnod1_10) + (myreldevnod1_8 + myreldevnod1_10));
var myabsdevnod3_0 = (1/2)*(abs(myabsdevnod2_0 - myabsdevnod2_4) + (myabsdevnod2_0 + myabsdevnod2_4));
var myreldevnod3_0 = (1/2)*(abs(myreldevnod2_0 - myreldevnod2_4) + (myreldevnod2_0 + myreldevnod2_4));
var myabsdevnod3_8 = myabsdevnod2_8;
var myreldevnod3_8 = myreldevnod2_8;
var myabsdevnod4_0 = (1/2)*(abs(myabsdevnod3_0 - myabsdevnod3_8) + (myabsdevnod3_0 + myabsdevnod3_8));
var myreldevnod4_0 = (1/2)*(abs(myreldevnod3_0 - myreldevnod3_8) + (myreldevnod3_0 + myreldevnod3_8));
var zmyabsdevmax = myabsdevnod4_0;
var zmyreldevmax = myreldevnod4_0;
minimize obj: myminfun;
subject to ce_1: cf_1 = 0;
subject to ce_2: cf_2 = 0;
subject to ce_3: cf_3 = 0;
solve;
display x_1;
display x_2;
display x_3;
display x_4;
display x_5;
display x_6;
display x_7;
display x_8;
display x_9;
display x_10;
display myminfun;
display zmyabsdevmax;
display zmyreldevmax;
# End Model
