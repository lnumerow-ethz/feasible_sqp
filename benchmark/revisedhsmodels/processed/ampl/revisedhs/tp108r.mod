# Model tp108r
# Source version 1
# Simple APM canonicalizer version 1.3
# AMPL back end version 1.1
param mfcorrhs := 0;
var x_1;
let x_1 := 1;
var x_2;
let x_2 := 1;
var x_3;
let x_3 := 1;
var x_4;
let x_4 := 1;
var x_5;
let x_5 := 1;
var x_6;
let x_6 := 1;
var x_7;
let x_7 := 1;
var x_8;
let x_8 := 1;
var x_9 >= 0;
let x_9 := 1;
var c_1 = 1 - x_3^2 - x_4^2;
var c_2 = 1 - x_9^2;
var c_3 = 1 - x_5^2 - x_6^2;
var c_4 = 1 - x_1^2 - (x_2 - x_9)^2;
var c_5 = 1 - (x_1 - x_5)^2 - (x_2 - x_6)^2;
var c_6 = 1 - (x_1 - x_7)^2 - (x_2 - x_8)^2;
var c_7 = 1 - (x_3 - x_5)^2 - (x_4 - x_6)^2;
var c_8 = 1 - (x_3 - x_7)^2 - (x_4 - x_8)^2;
var c_9 = 1 - x_7^2 - (x_8 - x_9)^2;
var c_10 = x_1*x_4 - x_2*x_3;
var c_11 = x_3*x_9;
var c_12 = (-1)*x_5*x_9;
var c_13 = x_5*x_8 - x_6*x_7;
var mf = (-1/2)*(x_1*x_4 - x_2*x_3 + x_3*x_9 - x_5*x_9 + x_5*x_8 - x_6*x_7);
var mfcorrr = (3*x_1 - 2*x_2)^2 + (3*x_5 - 2*x_6)^2;
var myminfun = mf + mfcorrr;
var myabsdevnod0_0 = abs(myminfun + 0.8660254037844386);
var myreldevnod0_0 = abs(myminfun/0.8660254037844386 + 1);
var myabsdevnod0_1 = abs(x_1 - 0.5547001962252291);
var myreldevnod0_1 = abs(x_1/0.5547001962252291 - 1);
var myabsdevnod0_2 = abs(x_2 - 0.8320502943378437);
var myreldevnod0_2 = abs(x_2/0.8320502943378437 - 1);
var myabsdevnod0_3 = abs(x_3 + 0.4432265940102775);
var myreldevnod0_3 = abs(x_3/0.4432265940102775 + 1);
var myabsdevnod0_4 = abs(x_4 - 0.8964096085841832);
var myreldevnod0_4 = abs(x_4/0.8964096085841832 - 1);
var myabsdevnod0_5 = abs(x_5 - 0.5547001962252291);
var myreldevnod0_5 = abs(x_5/0.5547001962252291 - 1);
var myabsdevnod0_6 = abs(x_6 - 0.8320502943378437);
var myreldevnod0_6 = abs(x_6/0.8320502943378437 - 1);
var myabsdevnod0_7 = abs(x_7 + 0.4432265940102775);
var myreldevnod0_7 = abs(x_7/0.4432265940102775 + 1);
var myabsdevnod0_8 = abs(x_8 - 0.8964096085841832);
var myreldevnod0_8 = abs(x_8/0.8964096085841832 - 1);
var myabsdevnod0_9 = abs(x_9);
var myreldevnod0_9 = abs(x_9);
var myabsdevnod1_0 = (1/2)*(abs(myabsdevnod0_0 - myabsdevnod0_1) + (myabsdevnod0_0 + myabsdevnod0_1));
var myreldevnod1_0 = (1/2)*(abs(myreldevnod0_0 - myreldevnod0_1) + (myreldevnod0_0 + myreldevnod0_1));
var myabsdevnod1_2 = (1/2)*(abs(myabsdevnod0_2 - myabsdevnod0_3) + (myabsdevnod0_2 + myabsdevnod0_3));
var myreldevnod1_2 = (1/2)*(abs(myreldevnod0_2 - myreldevnod0_3) + (myreldevnod0_2 + myreldevnod0_3));
var myabsdevnod1_4 = (1/2)*(abs(myabsdevnod0_4 - myabsdevnod0_5) + (myabsdevnod0_4 + myabsdevnod0_5));
var myreldevnod1_4 = (1/2)*(abs(myreldevnod0_4 - myreldevnod0_5) + (myreldevnod0_4 + myreldevnod0_5));
var myabsdevnod1_6 = (1/2)*(abs(myabsdevnod0_6 - myabsdevnod0_7) + (myabsdevnod0_6 + myabsdevnod0_7));
var myreldevnod1_6 = (1/2)*(abs(myreldevnod0_6 - myreldevnod0_7) + (myreldevnod0_6 + myreldevnod0_7));
var myabsdevnod1_8 = (1/2)*(abs(myabsdevnod0_8 - myabsdevnod0_9) + (myabsdevnod0_8 + myabsdevnod0_9));
var myreldevnod1_8 = (1/2)*(abs(myreldevnod0_8 - myreldevnod0_9) + (myreldevnod0_8 + myreldevnod0_9));
var myabsdevnod2_0 = (1/2)*(abs(myabsdevnod1_0 - myabsdevnod1_2) + (myabsdevnod1_0 + myabsdevnod1_2));
var myreldevnod2_0 = (1/2)*(abs(myreldevnod1_0 - myreldevnod1_2) + (myreldevnod1_0 + myreldevnod1_2));
var myabsdevnod2_4 = (1/2)*(abs(myabsdevnod1_4 - myabsdevnod1_6) + (myabsdevnod1_4 + myabsdevnod1_6));
var myreldevnod2_4 = (1/2)*(abs(myreldevnod1_4 - myreldevnod1_6) + (myreldevnod1_4 + myreldevnod1_6));
var myabsdevnod2_8 = myabsdevnod1_8;
var myreldevnod2_8 = myreldevnod1_8;
var myabsdevnod3_0 = (1/2)*(abs(myabsdevnod2_0 - myabsdevnod2_4) + (myabsdevnod2_0 + myabsdevnod2_4));
var myreldevnod3_0 = (1/2)*(abs(myreldevnod2_0 - myreldevnod2_4) + (myreldevnod2_0 + myreldevnod2_4));
var myabsdevnod3_8 = myabsdevnod2_8;
var myreldevnod3_8 = myreldevnod2_8;
var myabsdevnod4_0 = (1/2)*(abs(myabsdevnod3_0 - myabsdevnod3_8) + (myabsdevnod3_0 + myabsdevnod3_8));
var myreldevnod4_0 = (1/2)*(abs(myreldevnod3_0 - myreldevnod3_8) + (myreldevnod3_0 + myreldevnod3_8));
var zmyabsdevmax = myabsdevnod4_0;
var zmyreldevmax = myreldevnod4_0;
minimize obj: myminfun;
subject to ci_1: c_1 >= 0;
subject to ci_2: c_2 >= 0;
subject to ci_3: c_3 >= 0;
subject to ci_4: c_4 >= 0;
subject to ci_5: c_5 >= 0;
subject to ci_6: c_6 >= 0;
subject to ci_7: c_7 >= 0;
subject to ci_8: c_8 >= 0;
subject to ci_9: c_9 >= 0;
subject to ci_10: c_10 >= 0;
subject to ci_11: c_11 >= 0;
subject to ci_12: c_12 >= 0;
subject to ci_13: c_13 >= 0;
solve;
display x_1;
display x_2;
display x_3;
display x_4;
display x_5;
display x_6;
display x_7;
display x_8;
display x_9;
display myminfun;
display zmyabsdevmax;
display zmyreldevmax;
# End Model
